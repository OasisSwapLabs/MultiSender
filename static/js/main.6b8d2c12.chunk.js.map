{"version":3,"sources":["components/Toolbar.js","web3/connectors.js","components/WalletConnector.js","components/Front.js","containers/Home.js","assets/disperse.js","containers/Native.js","containers/Tokens.js","App.js","reportWebVitals.js","index.js"],"names":["Toolbar","useState","menuClick","e","Menu","pointing","secondary","Item","as","Link","name","onClick","to","position","injectedConnector","InjectedConnector","supportedChainIds","fetcher","library","abi","args","arg1","arg2","params","isAddress","address","method","contract","Contract","getSigner","Balance","useWeb3React","account","chainId","useSWR","ERC20","balance","data","mutate","useEffect","on","undefined","removeAllListeners","parseFloat","formatEther","toPrecision","Front","onButtonClick","Container","textAlign","Button","basic","color","Home","activate","active","console","log","Wallet","Grid","centered","Row","columns","Column","Divider","DISPERSEABI","Native","textValue","setTextValue","currency","setCurrency","handleClick","a","provider","ethers","providers","Web3Provider","window","ethereum","signer","tempArray","valueOf","split","oddArray","filter","v","i","evenArray","addArray","amtArray","total","length","isNaN","push","trim","toString","disperseContract","disperse","disperseSigned","connect","overrides","value","utils","parseEther","disperseEther","alert","width","Form","Field","Header","Content","TextArea","placeholder","onChange","target","UNIT","Tokens","tokenAddress","setTokenAddress","disableDisperse","setDisableDisperse","disableApprove","setDisableApprove","addressArray","setAddressArray","amountArray","setAmountArray","handleApprove","erc20Contract","erc20Signed","allowance","BigNumber","multipliedBy","toHex","approve","handleDisperse","disperseToken","Input","focus","disabled","getLibrary","connector","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6b8d2c12.chunk.js","sourcesContent":["import React,{useState} from 'react';\nimport {Link } from 'react-router-dom';\nimport { Menu } from 'semantic-ui-react';\n\n\nconst Toolbar = () => {\n    const [activeItem,setActiveItem] = useState('DEX');\n\n    const menuClick = (e) => {\n        //setActiveItem({name});\n        //console.log(e);\n    }\n    return (\n        <Menu pointing secondary>\n        <Menu.Item as={ Link }\n          name='OasisSwap Multisender'\n          onClick={menuClick}\n          to=\"/\"\n        />\n        <Menu.Menu position='right'>\n          <Menu.Item as={ Link }\n            name='Disperse Currency'\n            onClick={menuClick}\n            to=\"/Native\"\n          />\n          <Menu.Item as={ Link }\n            name='Disperse Tokens'\n            onClick={menuClick}\n            to=\"/Tokens\"\n          />\n        </Menu.Menu>\n      </Menu>\n    )\n}\n\nexport default Toolbar;","import { InjectedConnector } from '@web3-react/injected-connector';\n\nexport const injectedConnector = new InjectedConnector({\n    supportedChainIds: [\n      // 1, // Mainet\n      // 3, // Ropsten\n      // 4, // Rinkeby\n      // 5, // Goerli\n      // 42, // Kovan\n      // 56, // BSC Mainnet\n      // 97, // BSC Testnet\n      // 4690,//IOTEX Testnet\n      42262, // Oasis Mainnet\n    ],\n  });\n","import React, { useEffect } from 'react'; \nimport { useWeb3React } from '@web3-react/core';\nimport useSWR from 'swr';\nimport { formatEther, formatUnits } from \"@ethersproject/units\";\nimport { Contract } from '@ethersproject/contracts';\nimport { isAddress } from '@ethersproject/address';\nimport ERC20 from '../contracts/erc20.json';\nimport { Table } from 'semantic-ui-react';\n\n\nconst fetcher = (library,abi) => (...args) => {\n  const [arg1, arg2, ...params] = args;\n\n  if (isAddress(arg1)) {\n    const address = arg1;\n    const method = arg2;\n    const contract = new Contract(address, abi, library.getSigner());\n    return contract[method](...params);\n  }\n  \n  const method = arg1;\n  return library[method](arg2, ...params);\n}\n\nexport const Balance = () => {\n  const { account, library, chainId } = useWeb3React();\n  const { data: balance, mutate } = useSWR(['getBalance', account, 'latest'], {\n    fetcher: fetcher(library,ERC20),\n  });\n\n  useEffect(() => {\n    library.on('block',() => {\n      mutate(undefined, true);\n    });\n\n    return () => {\n      library.removeAllListeners('block');\n    };\n  },[]);\n\n  if(!balance) {\n    return <div>...</div>\n  }\n\n  if (chainId === 42262) {\n      return <div>ROSE : {parseFloat(formatEther(balance)).toPrecision(4)}</div>;\n  } else if (chainId === 42262) {\n      return <div>ROSE : {parseFloat(formatEther(balance)).toPrecision(4)}</div>;\n  } else {\n    return <div>...</div>;\n  }\n  \n}\n  \nexport const TokenBalance = ({ symbol, address, decimals }) => {\n  const { account, library } = useWeb3React();\n  const { data: balance, mutate } = useSWR([address, 'balanceOf', account], {\n    fetcher: fetcher(library, ERC20),\n  });\n\n  useEffect(() => {\n    const contract = new Contract(address, ERC20, library.getSigner());\n    const fromAcc = contract.filters.Transfer(account, null);\n    library.on(fromAcc, (from, to, amount, event) => {\n      console.log('Transfer|sent', { from, to, amount, event });\n      mutate(undefined, true);\n    });\n    const toAcc = contract.filters.Transfer(null, account);\n    library.on(toAcc, (from, to, amount, event) => {\n      console.log('Transfer|received', { from, to, amount, event });\n      mutate(undefined, true);\n    });\n\n    return () => {\n      library.removeAllListeners(fromAcc);\n      library.removeAllListeners(toAcc);\n    };\n  },[]);\n\n  if(!balance) {\n    return <Table.Body>...</Table.Body>\n  }\n  return (\n  <Table.Body>\n    <Table.Cell textAlign='center'>{symbol}</Table.Cell>\n    <Table.Cell textAlign='center'>{parseFloat(formatUnits(balance, decimals)).toPrecision(4)}</Table.Cell>\n  </Table.Body>);\n}\n\n\n/*\nexport const Wallet = () => {\n  const { chainId, account, activate, active } = useWeb3React();\n\n  const onClick = () => {\n    activate(injectedConnector);\n  }\n\n  return (\n    <div>\n      <h4>USER ACCOUNT</h4>\n      {active ? (\n        <div>\n          <div>ChainId: {chainId}</div>\n          <div>Account: {account}</div>   \n        </div>\n      ) : (\n        <Button primary onClick={onClick}>\n          Connect To MetaMask\n        </Button>\n      )}\n      {active && \n      <>\n        <Balance />\n        <TokenList chainId={chainId} />\n      </>\n      }\n    </div>\n  )\n}\n*/","import React from 'react';\nimport { Container, Button, Segment} from 'semantic-ui-react';\n\nconst Front = ({onButtonClick}) => {\n    return (\n        <Container textAlign=\"center\">\n            <Button basic color='green' onClick={onButtonClick}>\n                Connect To MetaMask\n            </Button>\n        </Container>\n        )\n}\n\nexport default Front;","import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Grid, Button, Divider } from 'semantic-ui-react';\nimport { ethers } from \"ethers\";\nimport { useWeb3React } from '@web3-react/core';\nimport { injectedConnector } from '../web3/connectors';\nimport { Balance} from '../components/WalletConnector';\nimport Front from '../components/Front';\n\nconst Home = () => {\n    const { chainId, account, activate, active } = useWeb3React();\n\n    const onButtonClick = () => {\n        activate(injectedConnector);\n    }\n    console.log(active);\n    console.log(account);\n    console.log(chainId);\n\n    const Wallet = () => {\n        return (\n          <div>\n            <h4>USER ACCOUNT</h4>\n            {active ? (\n              <div>\n                <div>ChainId: {chainId}</div>\n                <div>Account: {account}</div>   \n              </div>\n            ) : (\n              <Button basic color='green' onClick={onButtonClick}>\n                Connect To MetaMask\n              </Button>\n            )}\n            {active && \n            <>\n              <Balance />\n            </>\n            }\n          </div>\n        )\n      }\n\n      if (active) {\n          return (\n                <Grid centered>\n                    <Grid.Row>\n                        <Wallet />\n                    </Grid.Row>\n                    <Grid.Row columns={2}>\n                      <Grid.Column textAlign=\"center\">\n                        <Grid.Row>\n                          <h4>Disperse Native Currency</h4>\n                        </Grid.Row>\n                        <Divider />\n                        <Grid.Row>\n                          <Button basic color='green' as={Link} to='/Native'>Disperse Currency</Button>\n                        </Grid.Row>\n                      </Grid.Column>\n                      <Grid.Column textAlign=\"center\">\n                        <Grid.Row>\n                          <h4>Disperse ERC20/XRC20 Tokens</h4>\n                        </Grid.Row>\n                        <Divider />\n                        <Grid.Row>\n                          <Button basic color='green' as={Link} to='/Tokens'>Disperse Tokens</Button>\n                        </Grid.Row>\n                      </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n          )\n      }\n\n      return (\n        <div>\n          <Front onButtonClick={onButtonClick} />\n        </div>\n      )\n\n}\n\nexport default Home;","export const DISPERSEABI = {\n    iotexTestnet: \"0x3744c2e13e51A9305D2E9381f5E5D0BBd1a733a4\",\n    oasisMainnet: \"0x62d755A384F247456E9AC410297920F664aD647a\",\n    binanceTestnet: \"0x95e212393e76fA88A7b7D9246c5197d0AEaba407\",\n};","import React, {useEffect, useState} from 'react';\nimport { ethers } from \"ethers\";\nimport { Form, TextArea, Button, Grid, Divider, Header } from 'semantic-ui-react';\nimport { useWeb3React } from '@web3-react/core';\nimport { injectedConnector } from '../web3/connectors';\nimport disperse from '../contracts/Disperse.json';\nimport { DISPERSEABI } from '../assets/disperse';\n\nconst UNIT = 1000000000000000000;\nconst address = DISPERSEABI.oasisMainnet;\n\nconst Native = () => {\n    const [textValue, setTextValue] = useState('');\n    const { chainId, account, activate, active } = useWeb3React();\n    const [currency, setCurrency] = useState('');\n    const ph = \"0x314ab97b76e39d63c78d5c86c2daf8eaa306b182 3.141592\\n\"+\n    \"0x271bffabd0f79b8bd4d7a1c245b7ec5b576ea98a,2.7182\\n\"+\n    \"0x141ca95b6177615fb1417cf70e930e102bf8f584:1.41421\";\n\n    const onButtonClick = () => {\n        activate(injectedConnector);\n    }\n\n    const handleChange = (e) => {\n        setTextValue(e.target.value);\n    }\n\n    const handleClick = async () => {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        let tempArray = textValue.valueOf().split(/[\\s,;:\\t\\r\\n]+/);\n\n        let oddArray = tempArray.filter((v,i) => i%2);\n        let evenArray = tempArray.filter((v,i) => !(i%2));\n\n        let addArray = [];\n        let amtArray = [];\n        let total = 0.0;\n\n        for (let i = 0; i < evenArray.length; ++i) {\n            if (!isNaN(oddArray[i]) && (parseFloat(oddArray[i]) > 0.0 )) {\n            addArray.push(evenArray[i].trim());\n            amtArray.push((oddArray[i]*UNIT).toString());\n            total += parseFloat(oddArray[i]);\n            }\n        }\n\n        const disperseContract = new ethers.Contract(address,disperse.abi,provider);\n        const disperseSigned = disperseContract.connect(signer);\n\n        let overrides = {value: ethers.utils.parseEther(total.toString())};\n\n        if ((addArray.length === amtArray.length) && addArray.length > 0) {\n            let tx = await disperseSigned.disperseEther(addArray,amtArray,overrides);\n        } else {\n            alert(\"Please enter at least one valid transaction\");\n        }\n\n\n    }\n\n    useEffect(() => {\n        if (chainId === 42262) {\n            setCurrency(\"ROSE\");\n        } else if (chainId === 42262) {\n            setCurrency(\"ROSE\");\n        }\n    },[chainId]);\n\n    if ((chainId === 42262 || chainId === 42262) && active) {\n        return(\n            <Grid>\n                <Grid.Row>\n                    <Grid.Column width={3}>\n                    </Grid.Column>\n                    <Grid.Column width={10}>\n                        <Form>\n                            <Form.Field>\n                                <Header as='h2'>\n                                    <Header.Content>Disperse {currency}</Header.Content>\n                                </Header>\n                            </Form.Field>\n                            <Form.Field>\n                                <p>Please enter each address in a new line followed by a separator (comma,colon or blank space) and then the amount.</p>\n                            </Form.Field>\n                            <Divider />\n                            <Form.Field>\n                                <TextArea \n                                placeholder={ph}\n                                onChange={handleChange}\n                                />\n                            </Form.Field>\n                            <Divider />\n                            <Form.Field>\n                                <Button basic color='green' onClick={handleClick}>Disperse</Button>\n                            </Form.Field>\n                        </Form>\n                    </Grid.Column>\n                    <Grid.Column width={3}>\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        )\n    } else {\n        return(\n            <Grid>\n                <Grid.Row>\n                    <Grid.Column width={3}>\n                    </Grid.Column>\n                    <Grid.Column width={10}>\n                        <Grid.Row>\n                            {!(chainId === 42262 || chainId === 42262) ?\n                            <div><p>This DAPP only supports Oasis Emerald Chain (Chain ID : 42262)</p></div>\n                            : <div></div>}\n                        </Grid.Row>\n                        <Grid.Row>\n                            {!active ? <Button basic color='green' onClick={onButtonClick}>\n                                Connect To MetaMask\n                            </Button> : <div></div> }\n                        </Grid.Row>\n                    </Grid.Column>\n                    <Grid.Column width={3}>\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        )\n    }\n\n}\n\nexport default Native;","import React, {useState} from 'react';\nimport { ethers } from \"ethers\";\nimport { BigNumber } from \"bignumber.js\";\nimport { Form, TextArea, Input, Button, Grid, Divider, Header } from 'semantic-ui-react';\nimport { useWeb3React } from '@web3-react/core';\nimport { injectedConnector } from '../web3/connectors';\nimport disperse from '../contracts/Disperse.json';\nimport ERC20 from '../contracts/erc20.json';\nimport { DISPERSEABI } from '../assets/disperse';\n\nconst UNIT = 1000000000000000000;\nconst address = DISPERSEABI.oasisMainnet;\n\nconst Tokens = () => {\n    const [textValue, setTextValue] = useState('');\n    const [tokenAddress,setTokenAddress] = useState('');\n    const [disableDisperse,setDisableDisperse] = useState(true);\n    const [disableApprove,setDisableApprove] = useState(false);\n    const [addressArray,setAddressArray] = useState([]);\n    const [amountArray, setAmountArray] = useState([]);\n\n    const { chainId, account, activate, active } = useWeb3React();\n    const ph = \"0x314ab97b76e39d63c78d5c86c2daf8eaa306b182 3.141592\\n\"+\n    \"0x271bffabd0f79b8bd4d7a1c245b7ec5b576ea98a,2.7182\\n\"+\n    \"0x141ca95b6177615fb1417cf70e930e102bf8f584:1.41421\";\n\n    const onButtonClick = () => {\n        activate(injectedConnector);\n    }\n\n    const handleChange = (e) => {\n        setTextValue(e.target.value);\n    }\n\n    const handleInput = (e) => {\n        setTokenAddress(e.target.value);\n    }\n\n    const handleTokenCalls = async () => {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n    }\n\n    const handleApprove = async () => {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        let tempArray = textValue.valueOf().split(/[\\s,;:\\t\\r\\n]+/);\n\n        let oddArray = tempArray.filter((v,i) => i%2);\n        let evenArray = tempArray.filter((v,i) => !(i%2));\n\n        let addArray = [];\n        let amtArray = [];\n        let total = 0.0;\n\n        for (let i = 0; i < evenArray.length; ++i) {\n            if (!isNaN(oddArray[i]) && (parseFloat(oddArray[i]) > 0.0 )) {\n            addArray.push(evenArray[i].trim());\n            amtArray.push(('0x'+(oddArray[i]*UNIT).toString(16)));\n            total += parseFloat(oddArray[i]);\n            }\n        }\n\n        setAddressArray(addArray);\n        setAmountArray(amtArray);\n\n        const erc20Contract = new ethers.Contract(tokenAddress, ERC20, provider);\n        const erc20Signed = erc20Contract.connect(signer);\n\n        console.log(total);\n\n        let allowance = new BigNumber(total);\n        \n        allowance = allowance.multipliedBy(UNIT);\n        console.log(allowance.toString());\n        console.log(tokenAddress);\n        console.log(addArray);\n        console.log(amtArray);\n\n        const toHex = '0x' + allowance.toString(16);\n\n        const success = await erc20Signed.approve(address,toHex);\n\n        setDisableDisperse(false);\n\n        //let tx = await disperseSigned.disperseToken(tokenAddress,addArray,amtArray);\n\n    }\n\n    const handleDisperse = async () => {\n        setDisableApprove(true);\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n\n        const disperseContract = new ethers.Contract(address,disperse.abi,provider);\n        const disperseSigned = disperseContract.connect(signer);\n\n        if ((addressArray.length === amountArray.length) && addressArray.length > 0) {\n            let tx = await disperseSigned.disperseToken(tokenAddress,addressArray,amountArray);\n        } else {\n            alert(\"Please enter at least one valid transaction\");\n        }\n\n        setAddressArray([]);\n        setAmountArray([]);\n        setDisableApprove(false);\n        setDisableDisperse(true);\n    }\n\n    if ((chainId === 42262 || chainId === 42262) && active) {\n        return(\n            <Grid>\n                <Grid.Row>\n                    <Grid.Column width={3}>\n                    </Grid.Column>\n                    <Grid.Column width={10}>\n                        <Form>\n                            <Form.Field>\n                                <Header as='h2'>\n                                    <Header.Content>Disperse Tokens</Header.Content>\n                                </Header>\n                            </Form.Field>\n                            <Form.Field>\n                                <Input \n                                focus \n                                placeholder=\"Enter ERC20 Contract Address\" \n                                onChange={handleInput}\n                                />\n                            </Form.Field>\n                            <Divider />\n                            <Form.Field>\n                                <p>Please enter each address in a new line followed by a separator (comma,colon or blank space) and then the amount.</p>\n                            </Form.Field>\n                            <Divider />\n                            <Form.Field>\n                                <TextArea \n                                focus\n                                placeholder={ph}\n                                onChange={handleChange}\n                                />\n                            </Form.Field>\n                            <Divider />\n                            <Form.Field>\n                                <Button basic color='green' onClick={async () => handleApprove()} disabled={disableApprove}>Approve</Button>\n                                <Button basic color='green' onClick={async () => handleDisperse()} disabled={disableDisperse}>Disperse</Button>\n                            </Form.Field>   \n                        </Form>\n                    </Grid.Column>\n                    <Grid.Column width={3}>\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        )\n    } else {\n        return(\n            <Grid>\n                <Grid.Row>\n                    <Grid.Column width={3}>\n                    </Grid.Column>\n                    <Grid.Column width={10}>\n                        <Grid.Row>\n                            {!(chainId === 42262 || chainId === 42262) ?\n                            <div><p>This DAPP only supports Oasis Emerald Chain (Chain ID : 42262)</p></div>\n                            : <div></div>}\n                        </Grid.Row>\n                        <Grid.Row>\n                        {!active ? <Button basic color='green' onClick={onButtonClick}>\n                                Connect To MetaMask\n                            </Button> : <div></div> }\n                        </Grid.Row>\n                    </Grid.Column>\n                    <Grid.Column width={3}>\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        )\n    }\n}\n\nexport default Tokens;","import React from 'react'; \nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport { Web3ReactProvider } from '@web3-react/core';\nimport { Web3Provider } from '@ethersproject/providers';\n\nimport Toolbar from './components/Toolbar';\nimport Home from './containers/Home';\nimport Native from './containers/Native';\nimport Tokens from './containers/Tokens';\n\nfunction getLibrary(provider, connector) {\n  return new Web3Provider(provider) // this will vary according to whether you use e.g. ethers or web3.js\n}\n\nfunction App() {\n\n  return (\n    <Router>\n      <Web3ReactProvider getLibrary={getLibrary}>\n        <Toolbar />\n          <Switch>\n            <Route path=\"/Tokens\">\n              <Tokens />\n            </Route>\n            <Route path=\"/Native\">\n              <Native />\n            </Route>\n            <Route path=\"/\">\n              <Home />\n            </Route>\n          </Switch>\n      </Web3ReactProvider>\n    </Router>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}